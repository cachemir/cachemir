name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.21'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        configuration: |
          {
            "categories": [
              {
                "title": "## üöÄ Features",
                "labels": ["feature", "enhancement"]
              },
              {
                "title": "## üêõ Bug Fixes", 
                "labels": ["bug", "fix"]
              },
              {
                "title": "## üìö Documentation",
                "labels": ["documentation"]
              },
              {
                "title": "## üîß Maintenance",
                "labels": ["maintenance", "chore"]
              }
            ]
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: CacheMir ${{ steps.get_version.outputs.version }}
        body: |
          # CacheMir ${{ steps.get_version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## üì¶ Installation
          
          ### Docker
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}
          ```
          
          ### Binary
          Download the appropriate binary for your platform from the assets below.
          
          ## üöÄ Quick Start
          
          ```bash
          # Start server
          ./cachemir-server -port 8080
          
          # Use client
          go get github.com/${{ github.repository }}@${{ steps.get_version.outputs.version }}
          ```
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_NAME="cachemir-server"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build -ldflags="-s -w -X main.version=${{ needs.create-release.outputs.version }}" \
          -o "dist/${BINARY_NAME}" cmd/server/main.go
          
        # Create archive
        cd dist
        if [ "$GOOS" = "windows" ]; then
          zip "../cachemir-${{ needs.create-release.outputs.version }}-${GOOS}-${GOARCH}.zip" "${BINARY_NAME}"
        else
          tar -czf "../cachemir-${{ needs.create-release.outputs.version }}-${GOOS}-${GOARCH}.tar.gz" "${BINARY_NAME}"
        fi
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./cachemir-${{ needs.create-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.goos == 'windows' && 'zip' || 'tar.gz' }}
        asset_name: cachemir-${{ needs.create-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.goos == 'windows' && 'zip' || 'tar.gz' }}
        asset_content_type: application/octet-stream
