name: PR Comment

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request'
    permissions:
      pull-requests: write
      issues: write
    
    steps:
    - name: Download artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: ${{ github.event.workflow_run.id }},
          });
          
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name.startsWith('test-results-')) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });
              
              require('fs').writeFileSync('${{ github.workspace }}/test-results.zip', Buffer.from(download.data));
              break;
            }
          }
          
    - name: Extract test results
      run: |
        if [ -f test-results.zip ]; then
          unzip -q test-results.zip || true
        fi
        
    - name: Get PR number
      id: pr
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pullRequests } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: '${{ github.event.workflow_run.head_branch }}',
            state: 'open'
          });
          
          if (pullRequests.length > 0) {
            return pullRequests[0].number;
          }
          
    - name: Comment PR
      if: steps.pr.outputs.result
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const prNumber = ${{ steps.pr.outputs.result }};
          
          let comment = '## 🚀 CI Results\n\n';
          
          // Add workflow status
          const conclusion = '${{ github.event.workflow_run.conclusion }}';
          const statusEmoji = conclusion === 'success' ? '✅' : '❌';
          comment += `**Status**: ${statusEmoji} ${conclusion.toUpperCase()}\n\n`;
          
          // Add test results if available
          if (fs.existsSync('coverage.out')) {
            try {
              const { execSync } = require('child_process');
              const coverage = execSync('go tool cover -func=coverage.out | tail -1', { encoding: 'utf8' });
              const coverageMatch = coverage.match(/(\d+\.\d+)%/);
              if (coverageMatch) {
                const coveragePercent = parseFloat(coverageMatch[1]);
                const coverageEmoji = coveragePercent >= 80 ? '🟢' : coveragePercent >= 60 ? '🟡' : '🔴';
                comment += `### ${coverageEmoji} Test Coverage\n**${coveragePercent}%** of code is covered by tests\n\n`;
              }
            } catch (e) {
              console.log('Could not parse coverage:', e.message);
            }
          }
          
          // Add benchmark results if available
          if (fs.existsSync('benchmark.txt')) {
            const benchmark = fs.readFileSync('benchmark.txt', 'utf8');
            const benchmarkLines = benchmark.split('\n').filter(line => line.includes('Benchmark')).slice(0, 5);
            if (benchmarkLines.length > 0) {
              comment += '### ⚡ Benchmark Results\n```\n' + benchmarkLines.join('\n') + '\n```\n\n';
            }
          }
          
          // Add workflow run link
          comment += `### 📊 Details\n`;
          comment += `- **Workflow Run**: [#${{ github.event.workflow_run.run_number }}](${{ github.event.workflow_run.html_url }})\n`;
          comment += `- **Commit**: ${{ github.event.workflow_run.head_sha }}\n`;
          comment += `- **Branch**: ${{ github.event.workflow_run.head_branch }}\n\n`;
          
          comment += `---\n*🤖 This comment was automatically generated by the CI workflow*`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🚀 CI Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
          }
