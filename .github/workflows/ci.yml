name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        go-version: ['1.22', '1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
      shell: bash
      
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Run tests with race detector
      run: go test -race ./...
      
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./... | tee benchmark.txt
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.go-version }}
        path: |
          coverage.out
          benchmark.txt

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.3.1
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      uses: securego/gosec@v2.22.7
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('results.sarif') != ''
      with:
        sarif_file: results.sarif
        
    - name: Upload security scan results as artifact
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('results.sarif') != ''
      with:
        name: security-scan-results
        path: results.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Build server
      run: go build -v -o bin/cachemir-server cmd/server/main.go
      
    - name: Build client example
      run: go build -v -o bin/cachemir-client-example cmd/client-example/main.go
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ github.sha }}
        path: bin/
